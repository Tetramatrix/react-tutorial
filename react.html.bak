<head>  
<!--
<script src="https://unpkg.com/react@15/umd/react.development.js"></script>  
<script src="https://unpkg.com/react-dom@15/umd/react-dom.development.js"></script>  
<script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script> 

<script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>

<script src="https://unpkg.com/react@15/dist/react.min.js"></script>
<script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"></script>
<script crossorigin src="https://unpkg.com/create-react-class@15.6.2/create-react-class.min.js"></script>

</script>-->

 
<script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
<script crossorigin src="https://unpkg.com/create-react-class@15.6.2/create-react-class.min.js"></script>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.24.0/babel.js"></script> 

 <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
</head>
    


</head>  
<body>  

    <div id="root"></div>
    <div id="root2"></div>
      
    <script type="text/babel">  
    	
      
    /*   
    ADD REACT CODE HERE 
    
    //import React from 'react';
//import ReactDOM from 'react-dom';
    
    //var React = require('react');
  	//var createReactClass = require('create-react-class');

const { Component } = React;
const { render } = ReactDOM;

  	
    */  


		//var createReactClass = require('create-react-class');

    var App = createReactClass({
  
	  getInitialState: function() {
	    return {
	      jobs: []
	    }
	  },
	  
	  componentDidMount: function() {
	    // Is there a React-y way to avoid rebinding `this`? fat arrow?
	    var th = this;
	    this.serverRequest = 
	      axios.get(this.props.source)
	        .then(function(result) {    
	          th.setState({
	            jobs: result.data.jobs
	          });
	        })
	  },
	  
	  componentWillUnmount: function() {
	    this.serverRequest.abort();
	  },
	  
	  render: function() {
	    return (
	      <div>
	        <h1>Jobs!</h1>
	        {/* Don't have an ID to use for the key, URL work ok? */}
	        {this.state.jobs.map(function(job) {
	          return (
	            <div key={job.url} className="job">
	              <a href={job.url}>
	                {job.company_name}
	                is looking for a 
	                {job.term}
	                {job.title}
	              </a>
	            </div>
	          );
	        })}
	      </div>
	    )
	  }
	});

	ReactDOM.render(<App source="https://codepen.io/jobs.json" />, document.querySelector("#root"))
	
	
	class Hello extends React.Component {
    
    constructor(){
        super();
        this.state = {
            message: "my friend (from state)!"
        };
        this.updateMessage = this.updateMessage.bind(this);
    }
    updateMessage() {
        this.setState({
            message: "my friend (from changed state)!"
        });
    }
    render() {
         return (
           <div>
             <h1>Hello {this.state.message}!</h1>
             <button onClick={this.updateMessage}>Click me!</button>
           </div>   
        )
    }
}

ReactDOM.render(<Hello/>, document.getElementById("root2"));
      
    </script>  
</body>  
</html>